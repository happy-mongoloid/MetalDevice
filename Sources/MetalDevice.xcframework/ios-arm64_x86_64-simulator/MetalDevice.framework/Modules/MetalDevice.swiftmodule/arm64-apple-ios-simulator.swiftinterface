// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MetalDevice
import AVFoundation
import CoreMedia
import CoreVideo
import Foundation
@_exported import MetalDevice
import MetalKit
import MetalPerformanceShaders
import MobileCoreServices
import SceneKit
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public class VEditor : ObjectiveC.NSObject, AVFoundation.AVVideoCompositionValidationHandling {
  public var clipTimeRanges: [CoreMedia.CMTimeRange]
  public var trackIndex: Swift.Int
  public var transitionDuration: CoreMedia.CMTime?
  public var composition: AVFoundation.AVMutableComposition?
  public var videoComposition: AVFoundation.AVMutableVideoComposition?
  public init(clips: [AVFoundation.AVURLAsset], clipTimeRanges: [CoreMedia.CMTimeRange])
  public func buildCompositionObjectsForPlayback(_ forPlayback: Swift.Bool, overwriteExistingObjects: Swift.Bool)
  public func playerItem() -> AVFoundation.AVPlayerItem?
  @objc deinit
}
extension AVFoundation.AVAsset {
  public func orientationValue() -> Swift.Float
  public var transform: CoreFoundation.CGAffineTransform {
    get
  }
  public var transformedSize: CoreFoundation.CGSize {
    get
  }
}
extension CoreFoundation.CGAffineTransform {
  public func videoOrientationF() -> Swift.Float
}
public struct Uniform {
}
@_hasMissingDesignatedInitializers public class EditorProperties {
  public static var effects: [Swift.Int]
  public static var transitions: [Swift.Int]
  public static var effectKernelName: Swift.String
  public static var timeRanges: [CoreMedia.CMTimeRange]
  public static var transitionTimeRanges: [CoreMedia.CMTimeRange]
  public static var mediaTimeRanges: [CoreMedia.CMTimeRange]
  public var effectsKernelsList: [Swift.String]
  public static var luts: [Foundation.URL]
  public static var lutIndex: Swift.Int
  public static var orientation: [Swift.Float]
  public static var exportSize: CoreFoundation.CGSize
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MTLEditorPipe {
  public static var shared: MetalDevice.MTLEditorPipe
  public var texLoader: MetalKit.MTKTextureLoader
  public func setEffects(_ timeRanges: [CoreMedia.CMTimeRange], _ types: [Swift.String])
  public var effect: Swift.String {
    get
    set
  }
  public func setLut(_ index: Swift.Int)
  public func loadLutTexture(_ index: Swift.Int) -> (any Metal.MTLTexture)?
  public func drawExport(input: [CoreVideo.CVPixelBuffer?], outputBuffer: CoreVideo.CVPixelBuffer, onTransition: Swift.Bool = true, assetTime: Swift.Double, transitionTime: Swift.Double, itemIndex: Swift.Int = 0, tranformID: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MTDevice {
  public static let shared: MetalDevice.MTDevice
  public var device: any Metal.MTLDevice
  public var commandQueue: any Metal.MTLCommandQueue
  public var videoTextureCache: CoreVideo.CVMetalTextureCache?
  @objc deinit
  public func setup(_ escaping: @escaping () -> Swift.Void)
  final public func allocTextureCache()
  final public func newCommandBuffer() -> any Metal.MTLCommandBuffer
  final public class func renderPipe(vertexFunctionName: Swift.String = "vertex_shader", fragmentFunctionName: Swift.String, pixelFormat: Metal.MTLPixelFormat) throws -> any Metal.MTLRenderPipelineState
  final public class func texture(_ size: CoreFoundation.CGSize, pixelFormat: Metal.MTLPixelFormat = .bgra8Unorm) -> (any Metal.MTLTexture)?
  final public class func textureA(_ width: Swift.Int, _ height: Swift.Int) -> (any Metal.MTLTexture)?
  final public class func filerTexture(_ width: Swift.Int, _ height: Swift.Int) -> (any Metal.MTLTexture)?
  final public class func vertexBuffer() -> (any Metal.MTLBuffer)?
  final public class func faceBuffer(faceFloats: [simd.float2]) -> (any Metal.MTLBuffer)?
  final public let index_data: [Swift.UInt16]
  final public func renderPipe(vertexFunctionName: Swift.String = "vertexShader", fragmentFunctionName: Swift.String, pixelFormat: Metal.MTLPixelFormat) throws -> any Metal.MTLRenderPipelineState
  final public class func faceIndexBuffer(faceFloats: [simd.float2]) -> (any Metal.MTLBuffer)?
  final public func cVTexture(buffer: CoreVideo.CVPixelBuffer!) -> (any Metal.MTLTexture)?
  final public func ciTexture(_ img: CoreImage.CIImage?, size: CoreFoundation.CGSize, pixelFormat: Metal.MTLPixelFormat = .bgra8Unorm) -> (any Metal.MTLTexture)?
  final public func ciTextures(_ imgs: [CoreImage.CIImage], size: CoreFoundation.CGSize, commandBuff: any Metal.MTLCommandBuffer) -> (any Metal.MTLTexture)?
  final public class func scnTexture(_ size: CoreFoundation.CGSize) -> any Metal.MTLTexture
  final public class func sceneToTexture(in scnView: SceneKit.SCNView, _ commandBuffer: any Metal.MTLCommandBuffer, texture: inout any Metal.MTLTexture, time: CoreFoundation.CFTimeInterval)
  final public func computeState(compStr: Swift.String) -> (any Metal.MTLComputePipelineState)!
  final public func effectsComputeState(compStr: Swift.String) -> (any Metal.MTLComputePipelineState)!
  final public func dstTexture(buffer: CoreVideo.CVPixelBuffer!) -> (any Metal.MTLTexture)?
  public static func allocateBufferPool(with inputFormatDescription: CoreMedia.CMFormatDescription, outputRetainedBufferCountHint: Swift.Int) -> (outputBufferPool: CoreVideo.CVPixelBufferPool?, outputColorSpace: CoreGraphics.CGColorSpace?, outputFormatDescription: CoreMedia.CMFormatDescription?)
  public static func preallocateBuffers(pool: CoreVideo.CVPixelBufferPool, allocationThreshold: Swift.Int)
  public static func jpegDataFromCIImage(from renderedCIImage: CoreImage.CIImage, attachments: CoreFoundation.CFDictionary?) -> Foundation.Data?
  public static func jpegDataFromCGImage(from renderedCGImage: CoreGraphics.CGImage, attachments: CoreFoundation.CFDictionary?) -> Foundation.Data?
  public static func saveCIImageToCameraRoll(image: CoreImage.CIImage, _ comp: @escaping () -> Swift.Void)
  public static func jpegData(withPixelBuffer pixelBuffer: CoreVideo.CVPixelBuffer, attachments: CoreFoundation.CFDictionary?) -> Foundation.Data?
  public static func cgImage(from texture: any Metal.MTLTexture) throws -> CoreGraphics.CGImage?
}
extension Swift.SIMD2 where Scalar == Swift.Float {
  public func convertCoord() -> simd.float2
}
extension Metal.MTLRenderCommandEncoder {
  public func setFragmentTextures(_ textures: [(any Metal.MTLTexture)?], startingAt startIndex: Swift.Int = 0)
}
